/* automatically generated by rust-bindgen 0.55.1 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type srtp_cipher_type_id_t = u32;
pub type srtp_auth_type_id_t = u32;
pub const srtp_err_status_t_srtp_err_status_ok: srtp_err_status_t = 0;
pub const srtp_err_status_t_srtp_err_status_fail: srtp_err_status_t = 1;
pub const srtp_err_status_t_srtp_err_status_bad_param: srtp_err_status_t = 2;
pub const srtp_err_status_t_srtp_err_status_alloc_fail: srtp_err_status_t = 3;
pub const srtp_err_status_t_srtp_err_status_dealloc_fail: srtp_err_status_t = 4;
pub const srtp_err_status_t_srtp_err_status_init_fail: srtp_err_status_t = 5;
pub const srtp_err_status_t_srtp_err_status_terminus: srtp_err_status_t = 6;
pub const srtp_err_status_t_srtp_err_status_auth_fail: srtp_err_status_t = 7;
pub const srtp_err_status_t_srtp_err_status_cipher_fail: srtp_err_status_t = 8;
pub const srtp_err_status_t_srtp_err_status_replay_fail: srtp_err_status_t = 9;
pub const srtp_err_status_t_srtp_err_status_replay_old: srtp_err_status_t = 10;
pub const srtp_err_status_t_srtp_err_status_algo_fail: srtp_err_status_t = 11;
pub const srtp_err_status_t_srtp_err_status_no_such_op: srtp_err_status_t = 12;
pub const srtp_err_status_t_srtp_err_status_no_ctx: srtp_err_status_t = 13;
pub const srtp_err_status_t_srtp_err_status_cant_check: srtp_err_status_t = 14;
pub const srtp_err_status_t_srtp_err_status_key_expired: srtp_err_status_t = 15;
pub const srtp_err_status_t_srtp_err_status_socket_err: srtp_err_status_t = 16;
pub const srtp_err_status_t_srtp_err_status_signal_err: srtp_err_status_t = 17;
pub const srtp_err_status_t_srtp_err_status_nonce_bad: srtp_err_status_t = 18;
pub const srtp_err_status_t_srtp_err_status_read_fail: srtp_err_status_t = 19;
pub const srtp_err_status_t_srtp_err_status_write_fail: srtp_err_status_t = 20;
pub const srtp_err_status_t_srtp_err_status_parse_err: srtp_err_status_t = 21;
pub const srtp_err_status_t_srtp_err_status_encode_err: srtp_err_status_t = 22;
pub const srtp_err_status_t_srtp_err_status_semaphore_err: srtp_err_status_t = 23;
pub const srtp_err_status_t_srtp_err_status_pfkey_err: srtp_err_status_t = 24;
pub const srtp_err_status_t_srtp_err_status_bad_mki: srtp_err_status_t = 25;
pub const srtp_err_status_t_srtp_err_status_pkt_idx_old: srtp_err_status_t = 26;
pub const srtp_err_status_t_srtp_err_status_pkt_idx_adv: srtp_err_status_t = 27;
pub type srtp_err_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_ctx_t_ {
    _unused: [u8; 0],
}
pub type srtp_ctx_t = srtp_ctx_t_;
pub const srtp_sec_serv_t_sec_serv_none: srtp_sec_serv_t = 0;
pub const srtp_sec_serv_t_sec_serv_conf: srtp_sec_serv_t = 1;
pub const srtp_sec_serv_t_sec_serv_auth: srtp_sec_serv_t = 2;
pub const srtp_sec_serv_t_sec_serv_conf_and_auth: srtp_sec_serv_t = 3;
pub type srtp_sec_serv_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_crypto_policy_t {
    pub cipher_type: srtp_cipher_type_id_t,
    pub cipher_key_len: ::std::os::raw::c_int,
    pub auth_type: srtp_auth_type_id_t,
    pub auth_key_len: ::std::os::raw::c_int,
    pub auth_tag_len: ::std::os::raw::c_int,
    pub sec_serv: srtp_sec_serv_t,
}
#[test]
fn bindgen_test_layout_srtp_crypto_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_crypto_policy_t>(),
        24usize,
        concat!("Size of: ", stringify!(srtp_crypto_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_crypto_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(srtp_crypto_policy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_crypto_policy_t>())).cipher_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(cipher_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_crypto_policy_t>())).cipher_key_len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(cipher_key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_crypto_policy_t>())).auth_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(auth_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_crypto_policy_t>())).auth_key_len as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(auth_key_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_crypto_policy_t>())).auth_tag_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(auth_tag_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_crypto_policy_t>())).sec_serv as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_crypto_policy_t),
            "::",
            stringify!(sec_serv)
        )
    );
}
pub const srtp_ssrc_type_t_ssrc_undefined: srtp_ssrc_type_t = 0;
pub const srtp_ssrc_type_t_ssrc_specific: srtp_ssrc_type_t = 1;
pub const srtp_ssrc_type_t_ssrc_any_inbound: srtp_ssrc_type_t = 2;
pub const srtp_ssrc_type_t_ssrc_any_outbound: srtp_ssrc_type_t = 3;
pub type srtp_ssrc_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_ssrc_t {
    pub type_: srtp_ssrc_type_t,
    pub value: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_srtp_ssrc_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_ssrc_t>(),
        8usize,
        concat!("Size of: ", stringify!(srtp_ssrc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_ssrc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(srtp_ssrc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_ssrc_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_ssrc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_ssrc_t>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_ssrc_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_ekt_policy_ctx_t {
    _unused: [u8; 0],
}
pub type srtp_ekt_policy_t = *mut srtp_ekt_policy_ctx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_master_key_t {
    pub key: *mut ::std::os::raw::c_uchar,
    pub mki_id: *mut ::std::os::raw::c_uchar,
    pub mki_size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_srtp_master_key_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_master_key_t>(),
        24usize,
        concat!("Size of: ", stringify!(srtp_master_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_master_key_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_master_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_master_key_t>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_master_key_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_master_key_t>())).mki_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_master_key_t),
            "::",
            stringify!(mki_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_master_key_t>())).mki_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_master_key_t),
            "::",
            stringify!(mki_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_policy_t {
    pub ssrc: srtp_ssrc_t,
    pub rtp: srtp_crypto_policy_t,
    pub rtcp: srtp_crypto_policy_t,
    pub key: *mut ::std::os::raw::c_uchar,
    pub keys: *mut *mut srtp_master_key_t,
    pub num_master_keys: ::std::os::raw::c_ulong,
    pub ekt: srtp_ekt_policy_t,
    pub window_size: ::std::os::raw::c_ulong,
    pub allow_repeat_tx: ::std::os::raw::c_int,
    pub enc_xtn_hdr: *mut ::std::os::raw::c_int,
    pub enc_xtn_hdr_count: ::std::os::raw::c_int,
    pub next: *mut srtp_policy_t,
}
#[test]
fn bindgen_test_layout_srtp_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_policy_t>(),
        128usize,
        concat!("Size of: ", stringify!(srtp_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_policy_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).ssrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).rtp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(rtp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).rtcp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(rtcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).key as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).keys as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).num_master_keys as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(num_master_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).ekt as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(ekt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).window_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(window_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).allow_repeat_tx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(allow_repeat_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).enc_xtn_hdr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(enc_xtn_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).enc_xtn_hdr_count as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(enc_xtn_hdr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_policy_t>())).next as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_policy_t),
            "::",
            stringify!(next)
        )
    );
}
pub type srtp_t = *mut srtp_ctx_t;
extern "C" {
    pub fn srtp_init() -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_shutdown() -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_protect(
        ctx: srtp_t,
        rtp_hdr: *mut ::std::os::raw::c_void,
        len_ptr: *mut ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_protect_mki(
        ctx: *mut srtp_ctx_t,
        rtp_hdr: *mut ::std::os::raw::c_void,
        pkt_octet_len: *mut ::std::os::raw::c_int,
        use_mki: ::std::os::raw::c_uint,
        mki_index: ::std::os::raw::c_uint,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_unprotect(
        ctx: srtp_t,
        srtp_hdr: *mut ::std::os::raw::c_void,
        len_ptr: *mut ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_unprotect_mki(
        ctx: srtp_t,
        srtp_hdr: *mut ::std::os::raw::c_void,
        len_ptr: *mut ::std::os::raw::c_int,
        use_mki: ::std::os::raw::c_uint,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_create(session: *mut srtp_t, policy: *const srtp_policy_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_add_stream(session: srtp_t, policy: *const srtp_policy_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_remove_stream(session: srtp_t, ssrc: ::std::os::raw::c_uint) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_update(session: srtp_t, policy: *const srtp_policy_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_update_stream(session: srtp_t, policy: *const srtp_policy_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_crypto_policy_set_rtp_default(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_rtcp_default(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_aes_cm_128_hmac_sha1_32(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_aes_cm_128_null_auth(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_null_cipher_hmac_sha1_80(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_null_cipher_hmac_null(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_aes_cm_256_hmac_sha1_80(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_aes_cm_256_hmac_sha1_32(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_crypto_policy_set_aes_cm_256_null_auth(p: *mut srtp_crypto_policy_t);
}
extern "C" {
    pub fn srtp_dealloc(s: srtp_t) -> srtp_err_status_t;
}
pub const srtp_profile_t_srtp_profile_reserved: srtp_profile_t = 0;
pub const srtp_profile_t_srtp_profile_aes128_cm_sha1_80: srtp_profile_t = 1;
pub const srtp_profile_t_srtp_profile_aes128_cm_sha1_32: srtp_profile_t = 2;
pub const srtp_profile_t_srtp_profile_null_sha1_80: srtp_profile_t = 5;
pub const srtp_profile_t_srtp_profile_null_sha1_32: srtp_profile_t = 6;
pub const srtp_profile_t_srtp_profile_aead_aes_128_gcm: srtp_profile_t = 7;
pub const srtp_profile_t_srtp_profile_aead_aes_256_gcm: srtp_profile_t = 8;
pub type srtp_profile_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn srtp_crypto_policy_set_from_profile_for_rtp(
        policy: *mut srtp_crypto_policy_t,
        profile: srtp_profile_t,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_crypto_policy_set_from_profile_for_rtcp(
        policy: *mut srtp_crypto_policy_t,
        profile: srtp_profile_t,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_profile_get_master_key_length(profile: srtp_profile_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn srtp_profile_get_master_salt_length(profile: srtp_profile_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn srtp_append_salt_to_key(
        key: *mut ::std::os::raw::c_uchar,
        bytes_in_key: ::std::os::raw::c_uint,
        salt: *mut ::std::os::raw::c_uchar,
        bytes_in_salt: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn srtp_protect_rtcp(
        ctx: srtp_t,
        rtcp_hdr: *mut ::std::os::raw::c_void,
        pkt_octet_len: *mut ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_protect_rtcp_mki(
        ctx: srtp_t,
        rtcp_hdr: *mut ::std::os::raw::c_void,
        pkt_octet_len: *mut ::std::os::raw::c_int,
        use_mki: ::std::os::raw::c_uint,
        mki_index: ::std::os::raw::c_uint,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_unprotect_rtcp(
        ctx: srtp_t,
        srtcp_hdr: *mut ::std::os::raw::c_void,
        pkt_octet_len: *mut ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_unprotect_rtcp_mki(
        ctx: srtp_t,
        srtcp_hdr: *mut ::std::os::raw::c_void,
        pkt_octet_len: *mut ::std::os::raw::c_int,
        use_mki: ::std::os::raw::c_uint,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_set_user_data(ctx: srtp_t, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn srtp_get_user_data(ctx: srtp_t) -> *mut ::std::os::raw::c_void;
}
pub const srtp_event_t_event_ssrc_collision: srtp_event_t = 0;
pub const srtp_event_t_event_key_soft_limit: srtp_event_t = 1;
pub const srtp_event_t_event_key_hard_limit: srtp_event_t = 2;
pub const srtp_event_t_event_packet_index_limit: srtp_event_t = 3;
pub type srtp_event_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_event_data_t {
    pub session: srtp_t,
    pub ssrc: u32,
    pub event: srtp_event_t,
}
#[test]
fn bindgen_test_layout_srtp_event_data_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_event_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(srtp_event_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_event_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_event_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_event_data_t>())).session as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_event_data_t),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_event_data_t>())).ssrc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_event_data_t),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_event_data_t>())).event as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_event_data_t),
            "::",
            stringify!(event)
        )
    );
}
pub type srtp_event_handler_func_t =
    ::std::option::Option<unsafe extern "C" fn(data: *mut srtp_event_data_t)>;
extern "C" {
    pub fn srtp_install_event_handler(func: srtp_event_handler_func_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_get_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn srtp_get_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn srtp_set_debug_module(
        mod_name: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_list_debug_modules() -> srtp_err_status_t;
}
pub const srtp_log_level_t_srtp_log_level_error: srtp_log_level_t = 0;
pub const srtp_log_level_t_srtp_log_level_warning: srtp_log_level_t = 1;
pub const srtp_log_level_t_srtp_log_level_info: srtp_log_level_t = 2;
pub const srtp_log_level_t_srtp_log_level_debug: srtp_log_level_t = 3;
pub type srtp_log_level_t = ::std::os::raw::c_uint;
pub type srtp_log_handler_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: srtp_log_level_t,
        msg: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn srtp_install_log_handler(
        func: srtp_log_handler_func_t,
        data: *mut ::std::os::raw::c_void,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_get_protect_trailer_length(
        session: srtp_t,
        use_mki: u32,
        mki_index: u32,
        length: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_get_protect_rtcp_trailer_length(
        session: srtp_t,
        use_mki: u32,
        mki_index: u32,
        length: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_set_stream_roc(session: srtp_t, ssrc: u32, roc: u32) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_get_stream_roc(session: srtp_t, ssrc: u32, roc: *mut u32) -> srtp_err_status_t;
}
pub type srtp_auth_pointer_t = *mut srtp_auth_t;
pub type srtp_auth_alloc_func = ::std::option::Option<
    unsafe extern "C" fn(
        ap: *mut srtp_auth_pointer_t,
        key_len: ::std::os::raw::c_int,
        out_len: ::std::os::raw::c_int,
    ) -> srtp_err_status_t,
>;
pub type srtp_auth_init_func = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        key: *const u8,
        key_len: ::std::os::raw::c_int,
    ) -> srtp_err_status_t,
>;
pub type srtp_auth_dealloc_func =
    ::std::option::Option<unsafe extern "C" fn(ap: srtp_auth_pointer_t) -> srtp_err_status_t>;
pub type srtp_auth_compute_func = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        octets_to_auth: ::std::os::raw::c_int,
        tag_len: ::std::os::raw::c_int,
        tag: *mut u8,
    ) -> srtp_err_status_t,
>;
pub type srtp_auth_update_func = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        octets_to_auth: ::std::os::raw::c_int,
    ) -> srtp_err_status_t,
>;
pub type srtp_auth_start_func = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void) -> srtp_err_status_t,
>;
extern "C" {
    pub fn srtp_auth_get_key_length(a: *const srtp_auth_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srtp_auth_get_tag_length(a: *const srtp_auth_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srtp_auth_get_prefix_length(a: *const srtp_auth_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_auth_test_case_t {
    pub key_length_octets: ::std::os::raw::c_int,
    pub key: *const u8,
    pub data_length_octets: ::std::os::raw::c_int,
    pub data: *const u8,
    pub tag_length_octets: ::std::os::raw::c_int,
    pub tag: *const u8,
    pub next_test_case: *const srtp_auth_test_case_t,
}
#[test]
fn bindgen_test_layout_srtp_auth_test_case_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_auth_test_case_t>(),
        56usize,
        concat!("Size of: ", stringify!(srtp_auth_test_case_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_auth_test_case_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_auth_test_case_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_auth_test_case_t>())).key_length_octets as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(key_length_octets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_test_case_t>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_auth_test_case_t>())).data_length_octets as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(data_length_octets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_test_case_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_auth_test_case_t>())).tag_length_octets as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(tag_length_octets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_test_case_t>())).tag as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_auth_test_case_t>())).next_test_case as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_test_case_t),
            "::",
            stringify!(next_test_case)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_auth_type_t {
    pub alloc: srtp_auth_alloc_func,
    pub dealloc: srtp_auth_dealloc_func,
    pub init: srtp_auth_init_func,
    pub compute: srtp_auth_compute_func,
    pub update: srtp_auth_update_func,
    pub start: srtp_auth_start_func,
    pub description: *const ::std::os::raw::c_char,
    pub test_data: *const srtp_auth_test_case_t,
    pub id: srtp_auth_type_id_t,
}
#[test]
fn bindgen_test_layout_srtp_auth_type_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_auth_type_t>(),
        72usize,
        concat!("Size of: ", stringify!(srtp_auth_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_auth_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_auth_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).dealloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(dealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).compute as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(compute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).update as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).start as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).description as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).test_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(test_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_type_t>())).id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_type_t),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_auth_t {
    pub type_: *const srtp_auth_type_t,
    pub state: *mut ::std::os::raw::c_void,
    pub out_len: ::std::os::raw::c_int,
    pub key_len: ::std::os::raw::c_int,
    pub prefix_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_srtp_auth_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_auth_t>(),
        32usize,
        concat!("Size of: ", stringify!(srtp_auth_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_auth_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_auth_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_t>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_t>())).out_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_t),
            "::",
            stringify!(out_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_t>())).key_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_t),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_auth_t>())).prefix_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_auth_t),
            "::",
            stringify!(prefix_len)
        )
    );
}
extern "C" {
    pub fn srtp_auth_type_self_test(at: *const srtp_auth_type_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_auth_type_test(
        at: *const srtp_auth_type_t,
        test_data: *const srtp_auth_test_case_t,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_replace_auth_type(
        ct: *const srtp_auth_type_t,
        id: srtp_auth_type_id_t,
    ) -> srtp_err_status_t;
}
pub const srtp_cipher_direction_t_srtp_direction_encrypt: srtp_cipher_direction_t = 0;
pub const srtp_cipher_direction_t_srtp_direction_decrypt: srtp_cipher_direction_t = 1;
pub const srtp_cipher_direction_t_srtp_direction_any: srtp_cipher_direction_t = 2;
pub type srtp_cipher_direction_t = ::std::os::raw::c_uint;
pub type srtp_cipher_pointer_t = *mut srtp_cipher_t;
pub type srtp_cipher_alloc_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        cp: *mut srtp_cipher_pointer_t,
        key_len: ::std::os::raw::c_int,
        tag_len: ::std::os::raw::c_int,
    ) -> srtp_err_status_t,
>;
pub type srtp_cipher_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, key: *const u8) -> srtp_err_status_t,
>;
pub type srtp_cipher_dealloc_func_t =
    ::std::option::Option<unsafe extern "C" fn(cp: srtp_cipher_pointer_t) -> srtp_err_status_t>;
pub type srtp_cipher_set_aad_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        aad: *const u8,
        aad_len: u32,
    ) -> srtp_err_status_t,
>;
pub type srtp_cipher_encrypt_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        octets_to_encrypt: *mut ::std::os::raw::c_uint,
    ) -> srtp_err_status_t,
>;
pub type srtp_cipher_set_iv_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        iv: *mut u8,
        direction: srtp_cipher_direction_t,
    ) -> srtp_err_status_t,
>;
pub type srtp_cipher_get_tag_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        state: *mut ::std::os::raw::c_void,
        tag: *mut u8,
        len: *mut u32,
    ) -> srtp_err_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_cipher_test_case_t {
    pub key_length_octets: ::std::os::raw::c_int,
    pub key: *const u8,
    pub idx: *mut u8,
    pub plaintext_length_octets: ::std::os::raw::c_uint,
    pub plaintext: *const u8,
    pub ciphertext_length_octets: ::std::os::raw::c_uint,
    pub ciphertext: *const u8,
    pub aad_length_octets: ::std::os::raw::c_int,
    pub aad: *const u8,
    pub tag_length_octets: ::std::os::raw::c_int,
    pub next_test_case: *const srtp_cipher_test_case_t,
}
#[test]
fn bindgen_test_layout_srtp_cipher_test_case_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_cipher_test_case_t>(),
        88usize,
        concat!("Size of: ", stringify!(srtp_cipher_test_case_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_cipher_test_case_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_cipher_test_case_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).key_length_octets as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(key_length_octets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).idx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).plaintext_length_octets as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(plaintext_length_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).plaintext as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(plaintext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).ciphertext_length_octets as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(ciphertext_length_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).ciphertext as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(ciphertext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).aad_length_octets as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(aad_length_octets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).aad as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(aad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).tag_length_octets as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(tag_length_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<srtp_cipher_test_case_t>())).next_test_case as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_test_case_t),
            "::",
            stringify!(next_test_case)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_cipher_type_t {
    pub alloc: srtp_cipher_alloc_func_t,
    pub dealloc: srtp_cipher_dealloc_func_t,
    pub init: srtp_cipher_init_func_t,
    pub set_aad: srtp_cipher_set_aad_func_t,
    pub encrypt: srtp_cipher_encrypt_func_t,
    pub decrypt: srtp_cipher_encrypt_func_t,
    pub set_iv: srtp_cipher_set_iv_func_t,
    pub get_tag: srtp_cipher_get_tag_func_t,
    pub description: *const ::std::os::raw::c_char,
    pub test_data: *const srtp_cipher_test_case_t,
    pub id: srtp_cipher_type_id_t,
}
#[test]
fn bindgen_test_layout_srtp_cipher_type_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_cipher_type_t>(),
        88usize,
        concat!("Size of: ", stringify!(srtp_cipher_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_cipher_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_cipher_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).dealloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(dealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).set_aad as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(set_aad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).encrypt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(encrypt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).decrypt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(decrypt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).set_iv as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(set_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).get_tag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(get_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).description as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).test_data as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(test_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_type_t>())).id as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_type_t),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srtp_cipher_t {
    pub type_: *const srtp_cipher_type_t,
    pub state: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_int,
    pub algorithm: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_srtp_cipher_t() {
    assert_eq!(
        ::std::mem::size_of::<srtp_cipher_t>(),
        24usize,
        concat!("Size of: ", stringify!(srtp_cipher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_cipher_t>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_cipher_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_t>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_t>())).key_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_t),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_cipher_t>())).algorithm as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_cipher_t),
            "::",
            stringify!(algorithm)
        )
    );
}
extern "C" {
    pub fn srtp_cipher_get_key_length(c: *const srtp_cipher_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srtp_cipher_type_self_test(ct: *const srtp_cipher_type_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_type_test(
        ct: *const srtp_cipher_type_t,
        test_data: *const srtp_cipher_test_case_t,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_bits_per_second(
        c: *mut srtp_cipher_t,
        octets_in_buffer: ::std::os::raw::c_int,
        num_trials: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn srtp_cipher_type_alloc(
        ct: *const srtp_cipher_type_t,
        c: *mut *mut srtp_cipher_t,
        key_len: ::std::os::raw::c_int,
        tlen: ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_dealloc(c: *mut srtp_cipher_t) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_init(c: *mut srtp_cipher_t, key: *const u8) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_set_iv(
        c: *mut srtp_cipher_t,
        iv: *mut u8,
        direction: ::std::os::raw::c_int,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_output(
        c: *mut srtp_cipher_t,
        buffer: *mut u8,
        num_octets_to_output: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_encrypt(
        c: *mut srtp_cipher_t,
        buffer: *mut u8,
        num_octets_to_output: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_decrypt(
        c: *mut srtp_cipher_t,
        buffer: *mut u8,
        num_octets_to_output: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_get_tag(
        c: *mut srtp_cipher_t,
        buffer: *mut u8,
        tag_len: *mut u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_cipher_set_aad(
        c: *mut srtp_cipher_t,
        aad: *const u8,
        aad_len: u32,
    ) -> srtp_err_status_t;
}
extern "C" {
    pub fn srtp_replace_cipher_type(
        ct: *const srtp_cipher_type_t,
        id: srtp_cipher_type_id_t,
    ) -> srtp_err_status_t;
}
